com.jeremyfox.My_Notes.Activities.MainActivity -> com.jeremyfox.My_Notes.Activities.MainActivity:
    com.jeremyfox.My_Notes.Managers.NotesManager notesManager -> b
    android.widget.ViewFlipper viewFlipper -> c
    android.widget.TextView noteTitle -> d
    android.widget.TextView noteDetails -> e
    android.widget.Button dismissNoteButton -> f
    android.widget.Button editNoteButton -> g
    android.widget.GridView gridView -> h
    android.app.Activity ACTIVITY -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onDestroy() -> onDestroy
    void registerWIthAPI() -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void createGridView() -> b
    void setGridViewItems() -> c
    int deleteSelectedNotes() -> d
    int editSelectedNotes() -> e
    android.app.ProgressDialog showLoadingDialog() -> f
    android.widget.ViewFlipper access$000(com.jeremyfox.My_Notes.Activities.MainActivity) -> a
    void access$100(com.jeremyfox.My_Notes.Activities.MainActivity) -> b
    android.widget.GridView access$200(com.jeremyfox.My_Notes.Activities.MainActivity) -> c
    int access$300(com.jeremyfox.My_Notes.Activities.MainActivity) -> d
    int access$400(com.jeremyfox.My_Notes.Activities.MainActivity) -> e
    void access$500(com.jeremyfox.My_Notes.Activities.MainActivity) -> f
    com.jeremyfox.My_Notes.Managers.NotesManager access$600(com.jeremyfox.My_Notes.Activities.MainActivity) -> g
    android.widget.TextView access$700(com.jeremyfox.My_Notes.Activities.MainActivity) -> h
    android.widget.TextView access$800(com.jeremyfox.My_Notes.Activities.MainActivity) -> i
com.jeremyfox.My_Notes.Activities.MainActivity$1 -> com.jeremyfox.My_Notes.Activities.a:
    com.jeremyfox.My_Notes.Activities.MainActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.jeremyfox.My_Notes.Activities.MainActivity$2 -> com.jeremyfox.My_Notes.Activities.b:
    com.jeremyfox.My_Notes.Activities.MainActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.jeremyfox.My_Notes.Activities.MainActivity$3 -> com.jeremyfox.My_Notes.Activities.c:
    com.jeremyfox.My_Notes.Activities.MainActivity this$0 -> a
    void onSuccess(java.lang.Object) -> a
    void onFailure(int) -> a
com.jeremyfox.My_Notes.Activities.MainActivity$4 -> com.jeremyfox.My_Notes.Activities.d:
    android.widget.EditText val$titleInput -> a
    android.widget.EditText val$detailsInput -> b
    com.jeremyfox.My_Notes.Activities.MainActivity this$0 -> c
    void onClick(android.content.DialogInterface,int) -> onClick
com.jeremyfox.My_Notes.Activities.MainActivity$4$1 -> com.jeremyfox.My_Notes.Activities.e:
    com.jeremyfox.My_Notes.Activities.MainActivity$4 this$1 -> a
    void onSuccess(java.lang.Object) -> a
    void onFailure(int) -> a
com.jeremyfox.My_Notes.Activities.MainActivity$5 -> com.jeremyfox.My_Notes.Activities.f:
    android.app.ProgressDialog val$dialog -> a
    com.jeremyfox.My_Notes.Activities.MainActivity this$0 -> b
    void onSuccess(java.lang.Object) -> a
    void onFailure(int) -> a
com.jeremyfox.My_Notes.Activities.MainActivity$5$1 -> com.jeremyfox.My_Notes.Activities.g:
    android.widget.GridView val$grid -> a
    com.jeremyfox.My_Notes.Activities.MainActivity$5 this$1 -> b
    void onItemCheckedStateChanged(android.view.ActionMode,int,long,boolean) -> onItemCheckedStateChanged
    boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem) -> onActionItemClicked
    boolean onCreateActionMode(android.view.ActionMode,android.view.Menu) -> onCreateActionMode
    void onDestroyActionMode(android.view.ActionMode) -> onDestroyActionMode
    boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu) -> onPrepareActionMode
com.jeremyfox.My_Notes.Activities.MainActivity$5$2 -> com.jeremyfox.My_Notes.Activities.h:
    com.jeremyfox.My_Notes.Activities.MainActivity$5 this$1 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.jeremyfox.My_Notes.Activities.MainActivity$6 -> com.jeremyfox.My_Notes.Activities.i:
    com.jeremyfox.My_Notes.Classes.BasicNote val$note -> a
    com.jeremyfox.My_Notes.Activities.MainActivity this$0 -> b
    void onSuccess(java.lang.Object) -> a
    void onFailure(int) -> a
com.jeremyfox.My_Notes.Activities.MainActivity$7 -> com.jeremyfox.My_Notes.Activities.j:
    android.widget.EditText val$titleInput -> a
    android.widget.EditText val$detailsInput -> b
    com.jeremyfox.My_Notes.Classes.BasicNote val$note -> c
    com.jeremyfox.My_Notes.Activities.MainActivity this$0 -> d
    void onClick(android.content.DialogInterface,int) -> onClick
com.jeremyfox.My_Notes.Activities.MainActivity$7$1 -> com.jeremyfox.My_Notes.Activities.k:
    com.jeremyfox.My_Notes.Activities.MainActivity$7 this$1 -> a
    void onSuccess(java.lang.Object) -> a
    void onFailure(int) -> a
com.jeremyfox.My_Notes.Adapters.NotesAdapter -> com.jeremyfox.My_Notes.a.a:
    java.util.ArrayList notes -> a
    boolean shouldIncrementCounter -> b
    int counter -> c
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    boolean shouldIncrementCounter() -> a
    void setShouldIncrementCounter(boolean) -> a
com.jeremyfox.My_Notes.Classes.BasicNote -> com.jeremyfox.My_Notes.b.a:
    java.lang.String title -> a
    java.lang.String details -> b
    boolean selected -> c
    int recordId -> d
    java.lang.String getTitle() -> a
    java.lang.String getDetails() -> b
    void setSelected(boolean) -> a
    boolean isSelected() -> c
    int getRecordId() -> d
com.jeremyfox.My_Notes.Classes.Environment -> com.jeremyfox.My_Notes.b.b:
    com.jeremyfox.My_Notes.Classes.Environment instance -> a
    com.jeremyfox.My_Notes.Classes.Environment$AppEnv appEnvironment -> b
    com.jeremyfox.My_Notes.Classes.Environment getInstance() -> a
    com.jeremyfox.My_Notes.Classes.Environment$AppEnv getAppEnvironment() -> b
    void setAppEnvironment(com.jeremyfox.My_Notes.Classes.Environment$AppEnv) -> a
    boolean isDebug() -> c
com.jeremyfox.My_Notes.Classes.Environment$AppEnv -> com.jeremyfox.My_Notes.b.c:
    com.jeremyfox.My_Notes.Classes.Environment$AppEnv APP_ENV_PROD -> a
    com.jeremyfox.My_Notes.Classes.Environment$AppEnv APP_ENV_DEBUG -> b
    com.jeremyfox.My_Notes.Classes.Environment$AppEnv[] $VALUES -> c
    com.jeremyfox.My_Notes.Classes.Environment$AppEnv[] values() -> values
    com.jeremyfox.My_Notes.Classes.Environment$AppEnv valueOf(java.lang.String) -> valueOf
com.jeremyfox.My_Notes.Dialogs.NewNoteDialog -> com.jeremyfox.My_Notes.c.a:
    android.app.AlertDialog$Builder builder -> a
    android.app.AlertDialog dialog -> b
    android.widget.EditText titleInput -> c
    android.widget.EditText detailsInput -> d
    void showDialog() -> a
com.jeremyfox.My_Notes.Helpers.PrefsHelper -> com.jeremyfox.My_Notes.d.a:
    void setPref(android.content.Context,java.lang.String,java.lang.String) -> a
    java.lang.String getPref(android.content.Context,java.lang.String) -> a
com.jeremyfox.My_Notes.Interfaces.NetworkCallback -> com.jeremyfox.My_Notes.e.a:
    void onSuccess(java.lang.Object) -> a
    void onFailure(int) -> a
com.jeremyfox.My_Notes.Managers.AnalyticsManager -> com.jeremyfox.My_Notes.f.a:
    com.jeremyfox.My_Notes.Managers.AnalyticsManager instance -> a
    com.mixpanel.android.mpmetrics.MixpanelAPI mixpanelAPI -> b
    com.jeremyfox.My_Notes.Managers.AnalyticsManager getInstance() -> a
    void fireEvent(java.lang.String,java.util.HashMap) -> a
    void flushEvents() -> b
    void registerSuperProperty(java.lang.String,java.lang.String) -> a
com.jeremyfox.My_Notes.Managers.NetworkAsyncTask -> com.jeremyfox.My_Notes.f.b:
    com.jeremyfox.My_Notes.Interfaces.NetworkCallback callback -> a
    java.lang.String doInBackground(java.lang.Object[]) -> a
    void onPostExecute(java.lang.String) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.jeremyfox.My_Notes.Managers.NetworkManager -> com.jeremyfox.My_Notes.f.c:
    com.jeremyfox.My_Notes.Managers.NetworkManager instance -> a
    com.jeremyfox.My_Notes.Managers.NetworkManager getInstance() -> a
    boolean isConnected(android.content.Context) -> a
    void executeGetRequest(android.content.Context,java.lang.String,com.jeremyfox.My_Notes.Interfaces.NetworkCallback) -> a
    void executePostRequest(android.content.Context,java.lang.String,org.json.JSONObject,com.jeremyfox.My_Notes.Interfaces.NetworkCallback) -> a
    void executePutRequest(android.content.Context,java.lang.String,org.json.JSONObject,com.jeremyfox.My_Notes.Interfaces.NetworkCallback) -> b
    void executeDeleteRequest(android.content.Context,java.lang.String,org.json.JSONObject,com.jeremyfox.My_Notes.Interfaces.NetworkCallback) -> c
    void executeRequest(android.content.Context,java.lang.String,org.json.JSONObject,com.jeremyfox.My_Notes.Managers.NetworkManager$RequestType,com.jeremyfox.My_Notes.Interfaces.NetworkCallback) -> a
com.jeremyfox.My_Notes.Managers.NetworkManager$1 -> com.jeremyfox.My_Notes.f.d:
    int[] $SwitchMap$com$jeremyfox$My_Notes$Managers$NetworkManager$RequestType -> a
com.jeremyfox.My_Notes.Managers.NetworkManager$RequestType -> com.jeremyfox.My_Notes.f.e:
    com.jeremyfox.My_Notes.Managers.NetworkManager$RequestType GET -> a
    com.jeremyfox.My_Notes.Managers.NetworkManager$RequestType POST -> b
    com.jeremyfox.My_Notes.Managers.NetworkManager$RequestType PUT -> c
    com.jeremyfox.My_Notes.Managers.NetworkManager$RequestType DELETE -> d
    com.jeremyfox.My_Notes.Managers.NetworkManager$RequestType[] $VALUES -> e
    com.jeremyfox.My_Notes.Managers.NetworkManager$RequestType[] values() -> values
    com.jeremyfox.My_Notes.Managers.NetworkManager$RequestType valueOf(java.lang.String) -> valueOf
com.jeremyfox.My_Notes.Managers.NotesManager -> com.jeremyfox.My_Notes.f.f:
    com.jeremyfox.My_Notes.Managers.NotesManager instance -> a
    org.json.JSONArray notes -> b
    com.jeremyfox.My_Notes.Managers.NotesManager getInstance() -> a
    boolean retrieveNotesFromAPI(android.content.Context,com.jeremyfox.My_Notes.Interfaces.NetworkCallback) -> a
    org.json.JSONArray getNotes() -> b
    boolean removeNote(com.jeremyfox.My_Notes.Classes.BasicNote) -> a
    org.json.JSONArray access$002(com.jeremyfox.My_Notes.Managers.NotesManager,org.json.JSONArray) -> a
    org.json.JSONArray access$000(com.jeremyfox.My_Notes.Managers.NotesManager) -> a
com.jeremyfox.My_Notes.Managers.NotesManager$1 -> com.jeremyfox.My_Notes.f.g:
    boolean[] val$requestSuccessful -> a
    com.jeremyfox.My_Notes.Interfaces.NetworkCallback val$callback -> b
    com.jeremyfox.My_Notes.Managers.NotesManager this$0 -> c
    void onSuccess(java.lang.Object) -> a
    void onFailure(int) -> a
com.mixpanel.android.mpmetrics.AnalyticsMessages -> com.a.a.a.a:
    java.util.concurrent.atomic.AtomicBoolean mLogMixpanelMessages -> a
    com.mixpanel.android.mpmetrics.AnalyticsMessages$Worker mWorker -> b
    int ENQUEUE_PEOPLE -> c
    int ENQUEUE_EVENTS -> d
    int FLUSH_QUEUE -> e
    int SET_FLUSH_INTERVAL -> f
    int KILL_WORKER -> g
    int SET_ENDPOINT_HOST -> h
    int SET_FALLBACK_HOST -> i
    java.util.Map sInstances -> j
    com.mixpanel.android.mpmetrics.AnalyticsMessages getInstance(android.content.Context) -> a
    void eventsMessage(org.json.JSONObject) -> a
    void peopleMessage(org.json.JSONObject) -> b
    void postToServer() -> a
    com.mixpanel.android.mpmetrics.MPDbAdapter makeDbAdapter(android.content.Context) -> b
    com.mixpanel.android.mpmetrics.HttpPoster getPoster(java.lang.String,java.lang.String) -> a
    void logAboutMessageToMixpanel(java.lang.String) -> a
    void access$000(com.mixpanel.android.mpmetrics.AnalyticsMessages,java.lang.String) -> a
    int access$200() -> b
    int access$400() -> c
    int access$500() -> d
    int access$600() -> e
    int access$700() -> f
    int access$900() -> g
    int access$1100() -> h
com.mixpanel.android.mpmetrics.AnalyticsMessages$1 -> com.a.a.a.b:
com.mixpanel.android.mpmetrics.AnalyticsMessages$Worker -> com.a.a.a.c:
    java.lang.Object mHandlerLock -> b
    com.mixpanel.android.mpmetrics.MPDbAdapter mDbAdapter -> c
    android.os.Handler mHandler -> d
    long mFlushInterval -> e
    long mFlushCount -> f
    long mAveFlushFrequency -> g
    long mLastFlushTime -> h
    com.mixpanel.android.mpmetrics.AnalyticsMessages this$0 -> a
    boolean isDead() -> a
    void runMessage(android.os.Message) -> a
    android.os.Handler restartWorkerThread() -> b
    void updateFlushFrequency() -> c
    long access$302(com.mixpanel.android.mpmetrics.AnalyticsMessages$Worker,long) -> a
    com.mixpanel.android.mpmetrics.MPDbAdapter access$800(com.mixpanel.android.mpmetrics.AnalyticsMessages$Worker) -> a
    void access$1000(com.mixpanel.android.mpmetrics.AnalyticsMessages$Worker) -> b
    java.lang.Object access$1200(com.mixpanel.android.mpmetrics.AnalyticsMessages$Worker) -> c
    android.os.Handler access$1302(com.mixpanel.android.mpmetrics.AnalyticsMessages$Worker,android.os.Handler) -> a
    long access$300(com.mixpanel.android.mpmetrics.AnalyticsMessages$Worker) -> d
com.mixpanel.android.mpmetrics.AnalyticsMessages$Worker$1 -> com.a.a.a.d:
    java.util.concurrent.SynchronousQueue val$handlerQueue -> a
    com.mixpanel.android.mpmetrics.AnalyticsMessages$Worker this$1 -> b
    void run() -> run
com.mixpanel.android.mpmetrics.AnalyticsMessages$Worker$AnalyticsMessageHandler -> com.a.a.a.e:
    java.lang.String mEndpointHost -> b
    java.lang.String mFallbackHost -> c
    com.mixpanel.android.mpmetrics.AnalyticsMessages$Worker this$1 -> a
    void handleMessage(android.os.Message) -> handleMessage
    void sendAllData() -> a
    void sendData(com.mixpanel.android.mpmetrics.MPDbAdapter$Table,java.lang.String) -> a
com.mixpanel.android.mpmetrics.HttpPoster -> com.a.a.a.f:
    java.lang.String mDefaultHost -> a
    java.lang.String mFallbackHost -> b
    com.mixpanel.android.mpmetrics.HttpPoster$PostResult postData(java.lang.String,java.lang.String) -> a
    com.mixpanel.android.mpmetrics.HttpPoster$PostResult postHttpRequest(java.lang.String,java.util.List) -> a
com.mixpanel.android.mpmetrics.HttpPoster$PostResult -> com.a.a.a.g:
    com.mixpanel.android.mpmetrics.HttpPoster$PostResult SUCCEEDED -> a
    com.mixpanel.android.mpmetrics.HttpPoster$PostResult FAILED_RECOVERABLE -> b
    com.mixpanel.android.mpmetrics.HttpPoster$PostResult FAILED_UNRECOVERABLE -> c
    com.mixpanel.android.mpmetrics.HttpPoster$PostResult[] $VALUES -> d
    com.mixpanel.android.mpmetrics.HttpPoster$PostResult[] values() -> values
    com.mixpanel.android.mpmetrics.HttpPoster$PostResult valueOf(java.lang.String) -> valueOf
com.mixpanel.android.mpmetrics.MPDbAdapter -> com.a.a.a.h:
    java.lang.String CREATE_EVENTS_TABLE -> a
    java.lang.String CREATE_PEOPLE_TABLE -> b
    java.lang.String EVENTS_TIME_INDEX -> c
    java.lang.String PEOPLE_TIME_INDEX -> d
    com.mixpanel.android.mpmetrics.MPDbAdapter$MPDatabaseHelper mDb -> e
    int addJSON(org.json.JSONObject,com.mixpanel.android.mpmetrics.MPDbAdapter$Table) -> a
    void cleanupEvents(java.lang.String,com.mixpanel.android.mpmetrics.MPDbAdapter$Table) -> a
    void cleanupEvents(long,com.mixpanel.android.mpmetrics.MPDbAdapter$Table) -> a
    void deleteDB() -> a
    java.lang.String[] generateDataString(com.mixpanel.android.mpmetrics.MPDbAdapter$Table) -> a
    java.lang.String access$000() -> b
    java.lang.String access$100() -> c
    java.lang.String access$200() -> d
    java.lang.String access$300() -> e
com.mixpanel.android.mpmetrics.MPDbAdapter$MPDatabaseHelper -> com.a.a.a.i:
    java.io.File mDatabaseFile -> a
    void deleteDatabase() -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.mixpanel.android.mpmetrics.MPDbAdapter$Table -> com.a.a.a.j:
    com.mixpanel.android.mpmetrics.MPDbAdapter$Table EVENTS -> a
    com.mixpanel.android.mpmetrics.MPDbAdapter$Table PEOPLE -> b
    java.lang.String mTableName -> c
    com.mixpanel.android.mpmetrics.MPDbAdapter$Table[] $VALUES -> d
    com.mixpanel.android.mpmetrics.MPDbAdapter$Table[] values() -> values
    com.mixpanel.android.mpmetrics.MPDbAdapter$Table valueOf(java.lang.String) -> valueOf
    java.lang.String getName() -> a
com.mixpanel.android.mpmetrics.MixpanelAPI -> com.a.a.a.k:
    java.text.DateFormat ENGAGE_DATE_FORMAT -> a
    java.util.Map sInstanceMap -> b
    android.content.Context mContext -> c
    com.mixpanel.android.mpmetrics.SystemInformation mSystemInformation -> d
    com.mixpanel.android.mpmetrics.AnalyticsMessages mMessages -> e
    java.lang.String mToken -> f
    com.mixpanel.android.mpmetrics.MixpanelAPI$PeopleImpl mPeople -> g
    android.content.SharedPreferences mStoredPreferences -> h
    org.json.JSONObject mSuperProperties -> i
    java.lang.String mEventsDistinctId -> j
    java.lang.String mPeopleDistinctId -> k
    com.mixpanel.android.mpmetrics.WaitingPeopleRecord mWaitingPeopleRecord -> l
    com.mixpanel.android.mpmetrics.MixpanelAPI getInstance(android.content.Context,java.lang.String) -> a
    void track(java.lang.String,org.json.JSONObject) -> a
    void flush() -> a
    java.lang.String getDistinctId() -> b
    void registerSuperProperties(org.json.JSONObject) -> a
    com.mixpanel.android.mpmetrics.MixpanelAPI$People getPeople() -> c
    com.mixpanel.android.mpmetrics.AnalyticsMessages getAnalyticsMessages() -> d
    com.mixpanel.android.mpmetrics.SystemInformation getSystemInformation() -> e
    org.json.JSONObject getDefaultEventProperties() -> f
    void pushWaitingPeopleRecord() -> g
    void readSuperProperties() -> h
    void storeSuperProperties() -> i
    void readIdentities() -> j
    void writeIdentities() -> k
    void access$200(com.mixpanel.android.mpmetrics.MixpanelAPI) -> a
    com.mixpanel.android.mpmetrics.WaitingPeopleRecord access$300(com.mixpanel.android.mpmetrics.MixpanelAPI) -> b
    java.lang.String access$100(com.mixpanel.android.mpmetrics.MixpanelAPI) -> c
    com.mixpanel.android.mpmetrics.WaitingPeopleRecord access$302(com.mixpanel.android.mpmetrics.MixpanelAPI,com.mixpanel.android.mpmetrics.WaitingPeopleRecord) -> a
    com.mixpanel.android.mpmetrics.AnalyticsMessages access$500(com.mixpanel.android.mpmetrics.MixpanelAPI) -> d
    java.lang.String access$900(com.mixpanel.android.mpmetrics.MixpanelAPI) -> e
com.mixpanel.android.mpmetrics.MixpanelAPI$1 -> com.a.a.a.l:
com.mixpanel.android.mpmetrics.MixpanelAPI$People -> com.a.a.a.m:
    void set(org.json.JSONObject) -> a
    void increment(java.util.Map) -> a
    void append(java.lang.String,java.lang.Object) -> a
com.mixpanel.android.mpmetrics.MixpanelAPI$PeopleImpl -> com.a.a.a.n:
    com.mixpanel.android.mpmetrics.MixpanelAPI this$0 -> a
    void set(org.json.JSONObject) -> a
    void increment(java.util.Map) -> a
    void append(java.lang.String,java.lang.Object) -> a
    void append(org.json.JSONObject) -> b
    org.json.JSONObject stdPeopleMessage(java.lang.String,org.json.JSONObject) -> a
com.mixpanel.android.mpmetrics.SystemInformation -> com.a.a.a.o:
    android.content.Context mContext -> a
    java.lang.Boolean mHasNFC -> b
    java.lang.Boolean mHasTelephony -> c
    android.util.DisplayMetrics mDisplayMetrics -> d
    java.lang.String mAppVersionName -> e
    java.lang.Integer mAppVersionCode -> f
    java.lang.String getAppVersionName() -> a
    boolean hasNFC() -> b
    boolean hasTelephony() -> c
    android.util.DisplayMetrics getDisplayMetrics() -> d
    java.lang.String getCurrentNetworkOperator() -> e
    java.lang.Boolean isWifiConnected() -> f
com.mixpanel.android.mpmetrics.WaitingPeopleRecord -> com.a.a.a.p:
    org.json.JSONObject mSets -> a
    java.util.Map mAdds -> b
    java.util.List mAppends -> c
    void setOnWaitingPeopleRecord(org.json.JSONObject) -> a
    void incrementToWaitingPeopleRecord(java.util.Map) -> a
    void appendToWaitingPeopleRecord(org.json.JSONObject) -> b
    void readFromJSONString(java.lang.String) -> a
    java.lang.String toJSONString() -> a
    org.json.JSONObject setMessage() -> b
    java.util.Map incrementMessage() -> c
    java.util.List appendMessages() -> d
com.mixpanel.android.util.Base64Coder -> com.a.a.b.a:
    char[] map1 -> a
    byte[] map2 -> b
    java.lang.String encodeString(java.lang.String) -> a
    char[] encode(byte[]) -> a
    char[] encode(byte[],int) -> a
com.mixpanel.android.util.StringUtils -> com.a.a.b.b:
    java.lang.String inputStreamToString(java.io.InputStream) -> a
